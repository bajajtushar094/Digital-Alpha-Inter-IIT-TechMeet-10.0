# -*- coding: utf-8 -*-
"""utility_for_calculating_metrics_3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lJ3v6P0acFqNvaBdOD0Km7uTI23vSKhC
"""

import pandas as pd 
import numpy as np

def active_users(customers):
    return customers

def MRR(customers,avg_bill,isARR = False,ARR=-1):
    if(isARR):
        return ARR/12
    else:
        return customers*avg_bill

def ARR(MRR):
    return MRR*12

def ARPU(MRR,customers):
    return MRR/customers

def churn(customers1,customers2,islost=False,lostcustomers=0):
    if(islost):
        return lostcustomers*100/customers1
    else:
        return (customers1-customers2)*100/customers1

def conversion_rate(customers1,customers2,isfreetrial=False,freetrials=0):
    newcustomers = customers2-customers1
    if(isfreetrial):
        return (newcustomers*100)/freetrials
    else:
        return 100

def CAC(customers1,customers2,salescost=0,marketingcost=0,isnewcustomers=False,newcustomers=0):
    totalcost = salescost + marketingcost
    if(isnewcustomers):
        return totalcost/newcustomers
    else:
        return totalcost/(customers2-customers1)

def CACpaybackperiod(CAC,GM,ARPA=0,issingle=True):
    if(issingle):
        return CAC/GM
    else:
        return CAC/(GM*ARPA/100)

def LTV(ARPU=0,churn=0,islifetime=False,lifetime=0):
    if(islifetime):
        return lifetime
    else:
        return ARPU/churn

def CRR(customers1,customers2,isnewcustomers=False,newcustomers=0):
    if(isnewcustomers):
        return (customers2-newcustomers)/customers1
    else:
        return customers2/customers1

def ASP(customers1,customers2,MRR,isnewcustomers=False,newcustomers=-1):
    if(isnewcustomers):
        return (MRR/newcustomers)
    else:
        return MRR/(customers2-customers1)

def CAC_LTV_ratio(CAC,LTV):
    return CAC/LTV

def avgsalescycle(avgsalescyclelength):
    return avgsalescyclelength

def MRRexpansionrate(MRR1,MRR2):
    return (MRR2-MRR1)*100/MRR1

def qualified_leads(Market_Size,revenue):
    return revenue/Market_Size

"""https://www.statista.com/statistics/505243/worldwide-software-as-a-service-revenue/ for market size"""

def GM(totalrevenue,costofrevenue):
    return (totalrevenue-costofrevenue)/totalrevenue

def penetrationrate(customers,totalsector):
    return customers/totalsector