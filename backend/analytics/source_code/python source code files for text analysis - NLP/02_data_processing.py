# -*- coding: utf-8 -*-
"""02_data_processing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D6J8gKsjiSZQZCivO-IEgSrQ_iJgNOO1
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip -q install -q pandas nltk transformers

!pip install torch

import nltk
import pandas as pd
from transformers import pipeline

nltk.download('all')

df10k = pd.read_csv('dataset_10k.csv')
df10q = pd.read_csv('dataset_10q.csv')

print(len(df10k))
print(len(df10q))

summarizer = pipeline('summarization', model='t5-base')

classifier_model_name = 'bhadresh-savani/distilbert-base-uncased-emotion'
classifier_emotions = ['anger', 'disgust', 'fear', 'joy', 'sadness', 'surprise']

#classifier_model_name = 'ProsusA I/finbert'
#classifier_emotions = ['positive', 'neutral', 'negative']

classifier = pipeline('text-classification', model=classifier_model_name)

def find_emotional_sentences(text, emotions, threshold):
    sentences_by_emotion = {}
    for e in emotions:
        sentences_by_emotion[e]=[]
    sentences = nltk.sent_tokenize(text)
    print(f'Document has {len(text)} characters and {len(sentences)} sentences.')
    for s in sentences:
        prediction = classifier(s)
        if (prediction[0]['label']!='neutral' and prediction[0]['score']>threshold):
            #print (f'Sentence #{sentences.index(s)}: {prediction} {s}')
            sentences_by_emotion[prediction[0]['label']].append(s)
    for e in emotions:
        print(f'{e}: {len(sentences_by_emotion[e])} sentences')
    return sentences_by_emotion

def summarize_sentences(sentences_by_emotion, min_length, max_length):
    for k in sentences_by_emotion.keys():
        if (len(sentences_by_emotion[k])!=0):
            text = ' '.join(sentences_by_emotion[k])
            summary = summarizer(text, min_length=min_length, max_length=max_length)
            print(f"{k.upper()}: {summary[0]['summary_text']}\n")

text = '''We have customers of all sizes, from individuals to global Fortune 50 organizations. Our current customer base spans numerous industry categories, including education, entertainment/media, enterprise infrastructure, finance, government, health care, manufacturing, non-profit/not for profit and social impact, retail/consumer products, and software/internet. No individual customer represented more than 10% of our total revenue in the fiscal year ended January 31, 2021. As of January 31, 2021, we had approximately 467,100 customers with more than 10 employees.Increasing awareness of our platform and its broad range of capabilities has enabled us to substantially expand our customer base, which includes organizations of all sizes across industries. We define a customer as a separate and distinct buying entity, which can be a single paid host or an organization of any size (including a distinct unit of an organization) that has multiple paid hosts. To better distinguish business customers from our broader customer base, we review the number of customers with more than 10 employees. As of January 31, 2021, 2020, and 2019, we had approximately 467,100, 81,900, and 50,800 customers, respectively, with more than 10 employees. When disclosing the number of customers, we round down to the nearest hundred. We focus on growing the number of customers that contribute more than $100,000 of trailing 12 months revenue as a measure of our ability to scale with our customers and attract larger organizations to Zoom. Revenue from these customers represented 20%, 33%, and 30% of total revenue for the fiscal years ended January 31, 2021, 2020, and 2019, respectively. As of January 31, 2021, 2020, and 2019, we had 1,644, 641, and 344 customers, respectively, that contributed more than $100,000 of trailing 12 months revenue, demonstrating our rapid penetration of larger organizations, including enterprises. These customers are a subset of the customers with more than 10 employees.'''

sentences_by_emotion = find_emotional_sentences(text, classifier_emotions, 0.7)

sentences_by_emotion['anger']

summarize_sentences(sentences_by_emotion, min_length=30, max_length=60)

